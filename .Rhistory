tstat
pchisq(tstat, 1, log=F, lower.tail=F) # 0.0901
up.b <- 0.0663
l0 <- (1-up.b)^28 # 0.146
l1 <- (1-0)^28 # 1
tstat <- -2*log(l0/l1) # 3.8416
qchisq(0.05, df=1, lower.tail = F) # 3.8415
pchisq(tstat, 1, log=F, lower.tail=F) # 0.05
up.b <- 0.0663
l0 <- (1-up.b)^28
l0
l1 <- (1-0)^28 # 1
tstat <- -2*log(l0/l1)
tstat
qchisq(0.05, df=1, lower.tail = F) # 3.8415
pchisq(tstat, 1, log=F, lower.tail=F) # 0.05
(1-p1)/(1-p2)
p1
p1 <- 0.001304 # proportion of smokers who die of lung cancer
p2 <- 0.000121 # proportion of non-smokers who die of lung cancer
(1-p1)/(1-p2)
aspirin <- matrix(c(198, 193, (19934-198), (19942-193)), nrow=2)
dimnames(aspirin) <- list(Treatment=c("Aspirin", "Placebo"),
MI=c("Yes", "No"))
addmargins(aspirin)
odds.ratio(aspirin) # 1.03 = odds ratio of MI for Aspirin/Placebo
prop.table(aspirin)
chisq.test(aspirin)
chisq.test(aspirin, correct=F)
log.theta <- log(odds.ratio(aspirin))
Z <- qnorm(0.05/2, lower.tail=F)
logSE <- sqrt(sum(sapply(aspirin, function(x) 1/x)))
upper.bound <- log.theta+Z*logSE
lower.bound <- log.theta-Z*logSE
exp(lower.bound) # 0.841
exp(upper.bound) # 0.125
masp <- matrix(c(189, 104, 10845, 10933), nrow=2) # define the matrix
masp
Z <- qnorm(0.05/2, lower.tail=F) # get the Z-score (1.96)
p1 <- 189/11034 # get p1 and p2 from
p2 <- 104/11037
logSE <- sqrt((1-p1)/(11034*p1)+(1-p2)/(11037*p2))
log.upper <- log(p1/p2)+Z*logSE
log.lower <- log(p1/p2)-Z*logSE
exp(log.lower) # 1.43
exp(log.upper) # 2.30
masp <- matrix(c(189, 104, 10845, 10933), nrow=2) # define the matrix
masp
Z <- qnorm(0.05/2, lower.tail=F) # get the Z-score (1.96)
p1 <- 189/11034 # get p1 and p2 from ni1/ni+
p2 <- 104/11037
logSE <- sqrt((1-p1)/(11034*p1)+(1-p2)/(11037*p2))
log.upper <- log(p1/p2)+Z*logSE
log.lower <- log(p1/p2)-Z*logSE
exp(log.lower) # 1.43
exp(log.upper) # 2.30
likelihood <- curve((1-x)^28, cex=0.5,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
likelihood <- curve((1-x)^28, cex.main=0.5,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
likelihood <- curve((1-x)^28, cex.main=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
likelihood <- curve((1-x)^28, cex.main=1,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
loglike <- curve(log((1-x)^28), cex.main=1,
xlab = expression(pi),
ylab = "Log Likelihood",
main = expression(paste("Log likelihood as a function of ", pi)))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mar=c(5.1,4.1,4.1,2.1)
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mar=c(5.1,4.1,4.1,2.1))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mar=c(1,1,1,5))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mar=c(1,1,1,1))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mar=c(10,10,10,10))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mar=c(0.1,0.1,0.1,0.1))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mar=c(3.1,3.1,3.1,2.1))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mar=c(4.1,3.1,3.1,2.1))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mar=c(6.1,3.1,3.1,2.1))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mar=c(6.1,6.1,6.1,6.1))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mar=c(1,1,1,1))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8, cex.axis=0.8
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8, cex.axis=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
?mar
?par
par(mai=c(1.02,0.82,0.82,0.42))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8, cex.axis=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mai=c(0.5,0.52,0.52,0.42))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8, cex.axis=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mai=c(0.7,0.72,0.72,0.42))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8, cex.axis=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mai=c(1,1,1,0.42))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8, cex.axis=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mai=c(1.5,1.5,1.5,0.42))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8, cex.axis=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mar=c(5,6,4,2)+0.1,mgp=c(5,1,0))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8, cex.axis=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mar=c(5,6,4,2)+0.1,mgp=c(1,1,0))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8, cex.axis=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mar=c(5,6,4,2)+0.1,mgp=c(2,2,0))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8, cex.axis=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mar=c(5,6,4,2)+0.1,mgp=c(1,1,0))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8, cex.axis=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mar=c(5,6,4,2)+0.1)
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8, cex.axis=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
par(mar=c(5,6,4,2))
likelihood <- curve((1-x)^28, cex.main=0.8, cex.lab=0.8, cex.axis=0.8,
xlab = expression(pi),
ylab = "Likelihood",
main = expression(paste("Likelihood as a function of ", pi)))
Income = 1:3
Not = c(6, 6, 6)
Pretty = c(43, 113, 57)
Very = c(75, 178, 117)
library(VGAM)
install.packages(VGAM)
install.packages('VGAM'')
)
''
install.packages('VGAM')
library(VGAM)
fit1 = vglm(cbind(Not, Pretty, Very)~Income, family=multinomial)
summary(fit1)
fit2 = vglm(cbind(Not, Pretty, Very)~Income, family=cumulative(parallel=TRUE))
summary(fit2)
library('rfishbase')
chaets <- species_list(Family = "Chaetodontidae")
poms <- species_list(Family = "Pomacentridae")
labs <- species_list(Family = "Labridae")
head(poms)
list_fields("Depth")
list_fields("Length")
list_fields("diet")
list_fields("Diet)
")"
)
)
))
""
list_fields("Diet")
test <- species(species_all[[1]], fields = c("Length", "Depth", "Diet"))
species_all <- list(chaets, poms, labs)
test <- species(species_all[[1]], fields = c("Length", "Depth", "Diet"))
head(test)
lump <- stocks(species_all[[1]], fields = c("Length", "Depth", "Diet"))
head(lump)
lump <- stocks(species_all[[1]], fields ="Length")
lump <- stocks(species_all[[1]][1:10], fields ="Diet")
lump
list_fields("Diet")
lump <- ecology(species_all[[1]][1:10], fields ="DietTroph")
lump
lump <- ecology(species_all[[1]][1:10], fields ="DietRemark")
lump
lump <- diet(species_all[[1]][1:10], fields ="DietCode")
warnings()
lump
lump <- dbl(species_all[[1]][1:10], fields ="DietPercent")
lump <- diet(species_all[[1]][1:10], fields ="DietPercent")
lump
lump <- diet(species_all[[1]][1:10])
lump
list_fields("Diet")
lump <- diet(species_all[[1]][1:10], field = "FoodI")
lump
lump <- diet(species_all[[1]][1:10], fields = "FoodI")
lump
list_fields("Food")
lump <- fooditems(species_all[[1]][1:10], fields = "FoodI")
lump <- fooditems(species_all[[1]][1:10])
lump
lump <- fooditems(species_all[[1]][1:10], fields = "FoodI")
lump <- diet(species_all[[1]][1:10], fields = "FoodI")
lump
lump <- ecology(species_all[[1]][1:10], fields = "FoodI")
lump
lump <- diet(species_all[[1]][1:10], fields = "MainFood")
lump
lump <- fooditems(species_all[[1]][1:10])
lump
lump$FoodI
lump$autoctr
lump$PreyStage
new <- data.frame(food = lump$FoodI, stage = lump$PreyStage, sciname = lump$sciname)
new
lump <- fooditems(species_all[[1]][1:10], fields = c("FoodI", "PreyStage", "sciname"))
lump
lump <- fooditems(species_all[[1]][1:10], fields = c("FoodI", "FoodII", "FoodIII", "PreyStage", "sciname"))
lump <- fooditems(species_all[[1]][1:10], fields = c("FoodI", "FoodII", "FoodIII", "PredatorStage", "sciname"))
lump
list_fields("Predator")
lump <- fooditems(species_all[[1]][1:10], fields = c("FoodI", "FoodII", "FoodIII", "sciname", "PredatorStage"))
lump
lump$PredatorStage
View(lump)
species_all <- apply(savenames, species_list(Family = savenames))
species_all <- apply(savenames, species_list)
?apply
species_all <- apply(savenames, function(x) species_list(Family = x))
species_all <- apply(savenames, function(x) {species_list(Family = x)})
species_all <- apply(savenames, 1, function(x) {species_list(Family = x)})
savenames <- c("Chaetodontidae", "Pomacentridae", "Labridae")
species_all <- apply(savenames, 1, function(x) {species_list(Family = x)})
species_all <- apply(savenames, 1, function(x) species_list(Family = x))
species_all <- apply(savenames, function(x) species_list(Family = x))
savenames
families <- c("Chaetodontidae", "Pomacentridae", "Labridae")
species_all <- list()
for (i in 1:length(families)) {
species_all[[i]] <- species_list(Family = families[i])
}
species_all[[1]]
fields = c("FoodI", "FoodII", "FoodIII", "sciname", "PredatorStage")
list_fields("Depth")
list_fields("Depth")
list_fields("Size")
list_fields("Length")
list_fields("Common")
list_fields("Max")
list_fields("MaxLength")
size_depth_fields <- c("DepthRangeShallow", "DepthRangeDeep", "CommonLength")
diet_fields <- c("FoodI", "FoodII", "FoodIII", "sciname", "PredatorStage")
families <- c("Chaetodontidae", "Pomacentridae", "Labridae")
diet_fields <- c("FoodI", "FoodII", "FoodIII", "sciname", "PredatorStage")
size_depth_fields <- c("DepthRangeShallow", "DepthRangeDeep", "CommonLength")
species_names <- list()
species_info <- list()
for (i in 1:length(families)) {
species_names[[i]] <- species_list(Family = families[i])
species_info[[i]] <- merge(species_names[[i]], fooditems(species_names[[i]], fields = diet_fields),
species(species_names[[i]], fields = depth_fields))
}
size_depth_fields <- c("DepthRangeShallow", "DepthRangeDeep", "CommonLength")
species_names <- list()
species_info <- list()
for (i in 1:length(families)) {
species_names[[i]] <- species_list(Family = families[i])
species_info[[i]] <- merge(species_names[[i]], fooditems(species_names[[i]], fields = diet_fields),
species(species_names[[i]], fields = size_depth_fields))
}
species_names <- list()
diet_info <- list()
size_depth_info <- list()
for (i in 1:length(families)) {
species_names[[i]] <- species_list(Family = families[i])
diet_info[[i]] <- fooditems(species_names[[i]], fields = diet_fields)
size_depth_info[[i]] <- species(species_names[[i]], fields = size_depth_fields)
}
head(warnings())
species_names <- list()
diet_info <- list()
size_depth_info <- list()
for (i in 1:length(families)) {
species_names[[i]] <- species_list(Family = families[i])
diet_info[[i]] <- fooditems(species_names[[i]][1:10], fields = diet_fields)
size_depth_info[[i]] <- species(species_names[[i]][1:10], fields = size_depth_fields)
}
warnings()
diet_info[[1]]
size_depth_info[[1]]
list_fields("Length")
species(species_names[[1]][1:10], fields = "Length")
species("Stegastes nigricans", fields = "Length")
species("Stegastes nigricans", fields = "CommonLength")
library('rfishbase')
list_fields("Depth")
families <- c("Chaetodontidae", "Pomacentridae", "Labridae")
diet_fields <- c("FoodI", "FoodII", "FoodIII", "sciname", "PredatorStage", "sciname")
size_depth_fields <- c("DepthRangeShallow", "DepthRangeDeep", "Length", "CommonLength", "sciname")
species_names <- list()
diet_info <- list()
size_depth_info <- list()
for (i in 1:length(families)) {
species_names[[i]] <- species_list(Family = families[i])
diet_info[[i]] <- fooditems(species_names[[i]][1:10], fields = diet_fields)
size_depth_info[[i]] <- species(species_names[[i]][1:10], fields = size_depth_fields)
}
warnings()
diet_info[[1]]
diet_info[[2]]
diet_info[[3]]
size_depth_info[[1]]
size_depth_info[[2]]
size_depth_info[[3]]
merge(diet_info[[1]], size_depth_info[[1]])
paste(families[1], ".csv", sep="")
for (i in 1:length(families)) {
species_names[[i]] <- species_list(Family = families[i])
diet_info[[i]] <- fooditems(species_names[[i]], fields = diet_fields)
size_depth_info[[i]] <- species(species_names[[i]], fields = size_depth_fields)
species_info[[i]] <- merge(diet_info[[i]], size_depth_info[[i]])
write.csv(species_info[[i]], paste(families[i], ".csv", sep=""))
}
getwd()
library(rfishbase)
species_list(Family = 'Balistidae')
test = species_list(Family = 'Balistidae')
fbdata <- species(test)
ls(fbdata)
fbdata <- ecosystem(test)
butterflyfishes <- species_list("Chaetodontidae")
butterflyfishes
butterflyfishes <- species_list(family = "Chaetodontidae")
butterflyfishes <- species_list(Family = "Chaetodontidae")
butterflyfishes
temp <- fooditems(butterflyfishes)
head(temp)
diet_fields <- c("FoodI", "FoodII", "FoodIII", "sciname", "PredatorStage", "Commoness")
temp <- fooditems(butterflyfishes, fields = diet_fields)
?commandArgs
species_list(Family = "Banjosidae")
library(rfishase)
library(rfishbase)
species_list(Family = "Banjosidae")
install.packages("jsonlite")
library(jsonlite)
install.packages('VGAM')
library('VGAM')
?shapiro.test
setwd('/Users/hannah/Dropbox/Westneat_Lab/RFishBase/')
missingFound <- read.csv('./wrasseMissing.csv')
head(missingFound)
dim(wrasseData)
wrasseData <- read.csv('./wrasseData_09-06-2016.csv')
allNames <- wrasseData$sciname
missingNames
missingNames <- missingFound$sciname
missingNames
allNames %in% missingNames
head(wrasseData)
wrasseData <- read.csv('./wrasseData_09-06-2016.csv')[,-1]
names(wrasseData)
matches <- allNames %in% missingNames
wrasseData[matches,]
head(wrasseData[matches,])
head(wrasseData[matches,1:5])
head(missingFound)
missingFound <- read.csv('./wrasseMissing.csv')[,-1]
wrasseData <- read.csv('./wrasseData_09-06-2016.csv')[,-1]
missingNames <- missingFound$sciname
allNames <- wrasseData$sciname
head(missingFound)
wrasseData$Source <- rep("Fishbase", dim(wrasseData)[1])
head(wrasseData[matches,1:5])
names(wrasseData)
for (i in 1:dim(wrasseData)[1]) {
if (matches[i]==TRUE) {
print(wrasseData$sciname[i])
}
}
for (i in 1:dim(wrasseData)[1]) {
if (matches[i]==TRUE) {
wrasseData$DepthRangeShallow <- missingFound$DepthRangeShallow
wrasseData$DepthRangeDeep <- missingFound$DepthRangeDeep
wrasseData$Length <- missingFound$Length
wrasseData$Source <- missingFound$Source
}
}
missingFound <- read.csv('./wrasseMissing.csv')[,-1]
wrasseData <- read.csv('./wrasseData_09-06-2016.csv')[,-1]
missingNames <- missingFound$sciname
allNames <- wrasseData$sciname
wrasseData$Source <- rep("Fishbase", dim(wrasseData)[1])
# sciname: 1
# DepthRangeShallow: 7
# DepthRangeDeep: 8
# Length: 11
matches <- allNames %in% missingNames
head(wrasseData[matches,1:5])
# for every match:
# replace col. 7 from wrasseData with col. 2 from missingFound
# replace col. 8 from wrasseData with col. 3 from missingFound
# replace col. 11 from wrasseData with col. 4 from missingFound
# replace wrasseData$Source with missingFound$Source
for (i in 1:dim(wrasseData)[1]) {
if (matches[i]==TRUE) {
wrasseData$DepthRangeShallow[i] <- missingFound$DepthRangeShallow[i]
wrasseData$DepthRangeDeep[i] <- missingFound$DepthRangeDeep[i]
wrasseData$Length[i] <- missingFound$Length[i]
wrasseData$Source[i] <- missingFound$Source[i]
}
}
wrasseData[matches,1:10]
missingIdx <- match(wrasseData$sciname[i], missingFound$sciname)
missingIdx
i
which(allNames %in% missingNames)
matches <- which(allNames %in% missingNames)
matches
wrasseData$sciname[matches]
matches <- which(allNames %in% missingNames)
for (i in 1:length(matches)) {
j <- matches[i]
wrasseData$DepthRangeShallow[j] <- missingFound$DepthRangeShallow[i]
wrasseData$DepthRangeDeep[j] <- missingFound$DepthRangeDeep[i]
wrasseData$Length[j] <- missingFound$Length[i]
wrasseData$Source[j] <- missingFound$Source[i]
}
# for every match:
# replace col. 7 from wrasseData with col. 2 from missingFound
# replace col. 8 from wrasseData with col. 3 from missingFound
# replace col. 11 from wrasseData with col. 4 from missingFound
# replace wrasseData$Source with missingFound$Source
wrasseData[matches,1:8]
write.csv(wrasseData, file = './wrasseData_09-11-2016.csv')
write.csv(wrasseData, file = './Output/wrasseData_09-12-2016.csv')
library(rfishbase)
fam = "Sparidae"
spec <- species_list(Family = fam)
spec
write.csv(data.frame(Species=spec), '../GenBank Scraping/Sparids.csv')
write.csv(data.frame(Species=spec), '../GenBank Scraping/Sparids.csv', col.names = FALSE)
test <- data.frame(Species = spec)
test
test <- data.frame(Species = spec, col.names=FALSE)
test
test <- data.frame(Species = spec)
test
?write.csv
write.csv(data.frame(Species=spec), '../GenBank Scraping/Sparids.csv', col.names = NA)
write.csv(data.frame(Species=spec), '../GenBank Scraping/Sparids.csv', row.names = NA)
write.csv(data.frame(Species=spec), '../GenBank Scraping/Sparids.csv', row.names = FALSE)
